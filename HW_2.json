{
	"info": {
		"_postman_id": "4e119c9c-4f77-450c-b4ee-2f0bccd00215",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"//4.Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"name in response = name from request\", function () {\r",
							"pm.expect(jsonData.age).to.eql('25');\r",
							"});\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"age in response = age from request\", function () {\r",
							"pm.expect(jsonData.name).to.eql(\"Valentina\");\r",
							"});\r",
							"//6.Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"salary in response = salary from request\", function () {\r",
							"pm.expect(jsonData.salary).to.eql(400);\r",
							"});\r",
							"//7. Спарсить request.\r",
							"var req =request.data;\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"name in response = name from request\", function () {\r",
							"pm.expect(jsonData.name).to.eql(req.name);\r",
							"});\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"age in response = age from request\", function () {\r",
							"pm.expect(jsonData.age).to.eql(req.age);\r",
							"});\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"salary in response = salary from request\", function () {\r",
							"pm.expect(jsonData.salary).to.eql(+req.salary);\r",
							" });\r",
							"//11. Вывести в консоль параметр family из response\r",
							" console.log(jsonData.family)\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"u_salary_1_5_year in response = salary*4 from request\", function () {\r",
							"pm.expect(jsonData.family.u_salary_1_5_year).to.eql(req.salary*4);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Valentina",
							"type": "text"
						},
						{
							"key": "age",
							"value": "25",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "400",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"var info_3 = pm.response.json();\r",
							"//4. Спарсить request.\r",
							"var info_3req = {};\r",
							"pm.request.url.query.all().forEach((param) => { info_3req[param.key] = param.value}); //положили все ГЕТ квери параметры в переменную  info_3req \r",
							"console.log(info_3req);\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"name in response = name from request\", function () {\r",
							"    pm.expect(info_3.name).to.eql(info_3req.name);\r",
							"});\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"age in response =age from request\", function () {\r",
							"    pm.expect(info_3.age).to.eql(info_3req.age);\r",
							"});\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"salary in response = salary from request\", function () {\r",
							"pm.expect(info_3.salary).to.eql(+info_3req.salary);\r",
							" });\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"console.log(info_3.family)\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"dog have name\",function() {\r",
							"pm.expect(info_3.family.pets.dog).to.have.property(\"name\")\r",
							"})\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"dog have age\",function(){\r",
							"pm.expect(info_3.family.pets.dog).to.have.property(\"age\")\r",
							"})\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"name have Luky\",function(){\r",
							"pm.expect(info_3.family.pets.dog.name).to.eql(\"Luky\")\r",
							"})\r",
							"//12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"age have 4\",function(){\r",
							"pm.expect(info_3.family.pets.dog.age).to.eql(+4)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Tom&age=56&salary=600",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Tom"
						},
						{
							"key": "age",
							"value": "56"
						},
						{
							"key": "salary",
							"value": "600"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test (\"status code is 200\"),function() {\r",
							"    pm.responce.to.have.status(200)}\r",
							"//3. Спарсить response body в json.\r",
							"var info_4 = pm.response.json();\r",
							"//4. Спарсить request.\r",
							"var info_4req = {};\r",
							"pm.request.url.query.all().forEach((param) => { info_4req[param.key] = param.value});\r",
							"//var сюда имя=pm.request.url.query.toObject().name;\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"name in response = name from request\", function (){\r",
							"pm.expect(info_4.name).to.eql(info_4req.name)\r",
							"});\r",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"age in response = age from request\",function(){\r",
							"pm.expect(+info_4.age).to.eql(+info_4req.age)\r",
							"});\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"console.log(info_4req.salary)\r",
							"//8. Вывести в консоль параметр salary из response.\r",
							"console.log(info_4.salary)\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(info_4.salary[0])\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(info_4.salary[1])\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(info_4.salary[2])\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"salary[0]=salary from request\",function(){\r",
							"pm.expect(info_4.salary[0]).to.eql(+info_4req.salary)\r",
							"});\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"salary[1]=salary*2 from request\",function(){\r",
							"pm.expect(+info_4.salary[1]).to.eql(info_4req.salary*2)\r",
							"});\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"salary[2]=salary*3 from request\",function(){\r",
							"pm.expect(+info_4.salary[2]).to.eql(info_4req.salary*3)\r",
							"});\r",
							"//15. Создать в окружении переменную name\r",
							"//pm.environment.set(\"name\",info_4.name);\r",
							"pm.environment.set(\"name\",info_4.name);\r",
							"//16. Создать в окружении переменную age\r",
							"pm.environment.set(\"age\",info_4.age);\r",
							"//17. Создать в окружении переменную salary\r",
							"pm.environment.set(\"salary\",info_4.salary[0]);\r",
							"//18. Передать в окружение переменную name\r",
							"//19. Передать в окружение переменную age\r",
							"//20. Передать в окружение переменную salary\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"//var json_resp = json.parse\r",
							"console.log(info_4)\r",
							"console.log(info_4.salary)\r",
							"for ( let i of info_4.salary){\r",
							"    console.log(\"salary_\" + i)\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Nake&age=23&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Nake"
						},
						{
							"key": "age",
							"value": "23"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Вставить параметр salary из окружения в request\r",
							"//2. Вставить параметр age из окружения в age\r",
							"//3. Вставить параметр name из окружения в name\r",
							"//4. Отправить запрос.\r",
							"//5. Статус код 200\r",
							"pm.test(\"status code is 200\"), function (){\r",
							"    rm. response.to.have.status(200);\r",
							"} ;\r",
							"//6. Спарсить response body в json.\r",
							"var user2 = pm.response.json();\r",
							"//7. Спарсить request.\r",
							"var user2_req = request.date\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"json response have start_qa_salary\"), function (){\r",
							"    pm.expect(user2).to.have.property(start_qa_salary)\r",
							" };\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"json response have qa_salary_after_6_months\"), function (){\r",
							"    pm.expect(user2).to.have.property(qa_salary_after_6_months)\r",
							"};\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"json response have qa_salary_after_12_months\"), function (){\r",
							"    pm.expect(user2).to.have.property(qa_salary_after_12_months)\r",
							"};\r",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"json response have qa_salary_after_1.5_year\"), function () {\r",
							"    pm.expect(user2).to.have.property(\"qa_salary_after_1.5_year\")\r",
							"};\r",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"json response have qa_salary_after_3.5_years\"), function (){\r",
							"    pm.expect(user2).to.have.property(\"qa_salary_after_3.5_years\")\r",
							"}\r",
							"//13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"json response имеет have person\"), function (){\r",
							"    pm.expect(user2).to.have.property(\"person\")\r",
							"};\r",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary = salary from request\"), function (){\r",
							"    pm.expect(start_qa_salary).to.eql(user2.salary)\r",
							"};\r",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months = salary*2 from request\"), function (){\r",
							"    pm.expect(qa_salary_after_6_months).to.eql(user2_req.salary)\r",
							"};\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из /request.)\r",
							"pm.test(\"qa_salary_after_12_months = salary*2.7 from request\"), function (){\r",
							"    pm.expect(qa_salary_after_12_months).to.eql(\"user2_req.salary*2.7\")\r",
							"};\r",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year = salary*3.3 from request\"), function (){\r",
							"    pm.expect(\"qa_salary_after_1.5_year\").to.eql(\"user2_req.salary*3.3\")\r",
							"};\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_years = salary*3.8 from request\"), function (){\r",
							"    pm.expect(\"qa_salary_after_3.5_years\").to.eql(\"user2_req.salary*3.8\")\r",
							"};\r",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"person[1] = salary from request\"), function (){\r",
							"    pm.expect(u_name.person[1]).to.eql(user2_req.salary)\r",
							"};\r",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"u_age = age from request\"), function (){\r",
							"    pm.expect(u_age).to.eql(user2_req.age)\r",
							"};\r",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"u_salary_5_years = salary*4.2 from request\"), function (){\r",
							"    pm.expect(u_salary_5_years).to.eql(\"user2_req.salary*4.2\")\r",
							"};\r",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"console.log(user2)\r",
							"for ( var i = 0; i < user2.person.u_name.length; i++){\r",
							"console.log(\"u_name \" +i, user2.person.u_name[i]);\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}